name: Linux build

on: push

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-16.04]
        compiler: [gcc, clang]
    
    steps:
    - uses: actions/checkout@v2

    - name: install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y autoconf autoconf-archive automake ca-certificates file gnupg libtool make pkg-config libdispatch-dev libibumad-dev libopenmpi-dev libpciaccess-dev libssh-dev libudev-dev openmpi-bin openssh-client pciutils-dev software-properties-common wget
        if [ "${{ matrix.os }}" = "ubuntu-16.04" ]; then
          sudo apt-get install -y gnupg-curl
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
          sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/ /"
        else
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
          sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
        fi
        sudo apt-get update -y
        sudo apt-get install -y cuda-nvml-dev-10-1
        echo "::set-env name=CPATH::/usr/local/cuda-10.1/targets/x86_64-linux/include:$CPATH"

    - name: set compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "::set-env name=CC::clang"
          echo "::set-env name=CXX::clang++"
        else
          echo "::set-env name=CC::gcc"
          echo "::set-env name=CXX::g++"
        fi

    - name: autoreconf
      run: autoreconf -fiv

    - name: configure
      run: ./configure

    - name: make
      run: make -j$(nproc)

    - name: make check
      run: VERBOSE=1 make check -j$(nproc)

    - name: make install
      run: sudo make install

    - name: make installcheck
      run: LD_LIBRARY_PATH=/usr/local/lib make installcheck
